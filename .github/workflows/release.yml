name: Release

on:
  push:
    tags:
      - "*"
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  create_tag:
    name: Create tag from Cargo.toml
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'   # Only run this when main is pushed (not on tag) or triggered by workflow dispatch
    outputs:
      tag_name: ${{ steps.get_version.outputs.tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Get version from Cargo.toml
        id: get_version
        run: |
          version=$(grep '^version' Cargo.toml | head -n 1 | sed 's/version = "\(.*\)"/\1/')
          echo "Detected version: $version"
          echo "tag=v$version" >> $GITHUB_OUTPUT

      - name: Create tag v<version>
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag ${{ steps.get_version.outputs.tag }}
          git push origin ${{ steps.get_version.outputs.tag }}
  release:
    name: Cross build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    needs: [create_tag]   # Ensures the tag job runs first
    if: startsWith(github.ref, 'refs/tags/') || needs.create_tag.outputs.tag_name != ''
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            exe: rathole
            cross: false
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            exe: rathole
            cross: false
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            exe: rathole
            cross: true
          - os: ubuntu-latest
            target: arm-unknown-linux-musleabi
            exe: rathole
            cross: true
          - os: ubuntu-latest
            target: arm-unknown-linux-musleabihf
            exe: rathole
            cross: true
          - os: ubuntu-latest
            target: armv7-unknown-linux-musleabihf
            exe: rathole
            cross: true

          - os: macos-latest
            target: x86_64-apple-darwin
            exe: rathole
            cross: false
          
          - os: macos-latest
            target: aarch64-apple-darwin
            exe: rathole
            cross: false

          - os: windows-latest
            target: x86_64-pc-windows-msvc
            exe: rathole.exe
            cross: false
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      - uses: Swatinem/rust-cache@v2
      
      # Dependencies
      - name: Install OpenSSL (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get install -y pkg-config libssl-dev
      - name: Install OpenSSL (macOS)
        if: matrix.os == 'macos-latest'
        run: brew install openssl@3

      # Native build
      - name: Install target
        if: matrix.cross == false
        run: rustup target add ${{ matrix.target }}
      - name: Run tests
        if: matrix.cross == false && matrix.target != 'aarch64-apple-darwin'
        run: cargo test --release --target ${{ matrix.target }} --verbose 
      - name: Build release
        if: matrix.cross == false 
        run: cargo build --release --target ${{ matrix.target }}

      # Cross build
      - name: Install cross
        if: matrix.cross
        run: cargo install --version 0.2.5 cross
      - name: Run tests
        if: matrix.cross
        run: cross test --release --target ${{ matrix.target }} --verbose --features embedded --no-default-features
      - name: Build release
        if: matrix.cross
        run: cross build --release --target ${{ matrix.target }} --features embedded --no-default-features

      - name: Run UPX
        # Upx may not support some platforms. Ignore the errors
        continue-on-error: true
        if: matrix.os == 'ubuntu-latest'
        uses: crazy-max/ghaction-upx@v1
        with:
          version: v4.0.2
          files: target/${{ matrix.target }}/release/${{ matrix.exe }}
          args: -q --best --lzma
      - uses: actions/upload-artifact@v4
        with:
          name: rathole-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/${{ matrix.exe }}
      - name: Zip Release
        uses: TheDoctor0/zip-release@0.6.1
        with:
          type: zip
          filename: rathole-${{ matrix.target }}.zip
          directory: target/${{ matrix.target }}/release/
          path: ${{ matrix.exe }}
      - name: Publish
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: target/${{ matrix.target }}/release/rathole-${{ matrix.target }}.zip
          generate_release_notes: true
          draft: true
  docker:
    name: Publish to Docker Hub
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs: release
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v6
        with:
          push: true
          platforms: linux/amd64, linux/arm64, linux/armhf, linux/armv7
          tags: ${{ github.actor }}/rathole:latest, ${{ github.actor }}/rathole:${{ github.ref_name }}
          cache-from: type=registry,ref=${{ github.actor }}/rathole:latest # Enable caching
          cache-to: type=inline # Inline caching for faster builds